import asyncio
import aiohttp
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional

BACKEND_URL = os.getenv('BACKEND_URL', 'http://localhost:8000/api/v1')

class NotificationService:
    def __init__(self, bot):
        self.bot = bot
        self.running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = True
        await self._notification_loop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = False
    
    async def _notification_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self.running:
            try:
                await self._check_and_send_notifications()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)
    
    async def _check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
                test_users = ["123456789", "987654321"]
                
                for user_id in test_users:
                    await self._send_scheduled_notifications(session, user_id)
                    await self._send_daily_motivation(session, user_id)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def _send_scheduled_notifications(self, session: aiohttp.ClientSession, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.get(f'{BACKEND_URL}/notifications/settings?user_id={user_id}') as response:
                if response.status != 200:
                    return
                
                settings = await response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if not settings.get('lesson_reminders', True):
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with session.get(f'{BACKEND_URL}/schedule?user_id={user_id}') as response:
                    if response.status != 200:
                        return
                    
                    schedule_data = await response.json()
                    lessons = schedule_data.get('schedule', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è
                    now = datetime.now()
                    for lesson in lessons:
                        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                        lesson_time = self._parse_lesson_time(lesson.get('time', ''))
                        if lesson_time:
                            time_diff = lesson_time - now
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –∑–∞–Ω—è—Ç–∏—è
                            if timedelta(hours=0, minutes=55) <= time_diff <= timedelta(hours=1, minutes=5):
                                await self._send_lesson_reminder(user_id, lesson)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∑–∞–Ω—è—Ç–∏—è
                            elif timedelta(hours=23, minutes=55) <= time_diff <= timedelta(hours=24, minutes=5):
                                await self._send_lesson_reminder(user_id, lesson, is_advance=True)
                                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def _send_daily_motivation(self, session: aiohttp.ClientSession, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with session.get(f'{BACKEND_URL}/notifications/settings?user_id={user_id}') as response:
                if response.status != 200:
                    return
                
                settings = await response.json()
                
                if not settings.get('daily_motivation', True):
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
                reminder_time = settings.get('reminder_time', '09:00')
                current_time = datetime.now().strftime('%H:%M')
                
                if current_time == reminder_time:
                    await self._send_motivation_message(user_id)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
    
    def _parse_lesson_time(self, time_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏—è"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in time_str and "18:00" in time_str:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                now = datetime.now()
                days_ahead = 0 - now.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                if days_ahead <= 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É–∂–µ –ø—Ä–æ—à–µ–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
                    days_ahead += 7
                next_monday = now + timedelta(days=days_ahead)
                return next_monday.replace(hour=18, minute=0, second=0, microsecond=0)
            
            elif "–í—Ç–æ—Ä–Ω–∏–∫" in time_str and "19:00" in time_str:
                now = datetime.now()
                days_ahead = 1 - now.weekday()  # 1 = –≤—Ç–æ—Ä–Ω–∏–∫
                if days_ahead <= 0:
                    days_ahead += 7
                next_tuesday = now + timedelta(days=days_ahead)
                return next_tuesday.replace(hour=19, minute=0, second=0, microsecond=0)
            
            elif "–°—Ä–µ–¥–∞" in time_str and "17:30" in time_str:
                now = datetime.now()
                days_ahead = 2 - now.weekday()  # 2 = —Å—Ä–µ–¥–∞
                if days_ahead <= 0:
                    days_ahead += 7
                next_wednesday = now + timedelta(days=days_ahead)
                return next_wednesday.replace(hour=17, minute=30, second=0, microsecond=0)
            
            return None
        except:
            return None
    
    async def _send_lesson_reminder(self, user_id: str, lesson: Dict, is_advance: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏"""
        try:
            title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏"
            if is_advance:
                message = f"–ó–∞–≤—Ç—Ä–∞ –≤ {lesson.get('time', '').split(', ')[1]} —É –≤–∞—Å –∑–∞–Ω—è—Ç–∏–µ '{lesson.get('title', '')}'"
            else:
                message = f"–ß–µ—Ä–µ–∑ —á–∞—Å —É –≤–∞—Å –∑–∞–Ω—è—Ç–∏–µ '{lesson.get('title', '')}' –≤ {lesson.get('location', '')}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
            async with aiohttp.ClientSession() as session:
                await session.post(f'{BACKEND_URL}/notifications/send', json={
                    'user_id': user_id,
                    'notification_type': 'lesson_reminder',
                    'title': title,
                    'message': message
                })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üîî {title}\n\n{message}"
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏: {e}")
    
    async def _send_motivation_message(self, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            motivation_messages = [
                "üí™ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É –¥–Ω—é –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?",
                "üåü –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤!",
                "üìö –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
                "üéØ –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!",
                "üî• –í–∞—à –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º!"
            ]
            
            import random
            message = random.choice(motivation_messages)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
            async with aiohttp.ClientSession() as session:
                await session.post(f'{BACKEND_URL}/notifications/send', json={
                    'user_id': user_id,
                    'notification_type': 'daily_motivation',
                    'title': '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è',
                    'message': message
                })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üí™ {message}"
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
    
    async def send_test_notification(self, user_id: str, test_name: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–µ—Å—Ç–µ"""
        try:
            title = "–î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç"
            message = f"–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç '{test_name}' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
            async with aiohttp.ClientSession() as session:
                await session.post(f'{BACKEND_URL}/notifications/send', json={
                    'user_id': user_id,
                    'notification_type': 'test_notification',
                    'title': title,
                    'message': message
                })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üìù {title}\n\n{message}"
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ—Å—Ç–µ: {e}")
    
    async def send_club_reminder(self, user_id: str, club_name: str, club_time: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–ª—É–±–µ"""
        try:
            title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–ª—É–±–µ"
            message = f"–°–µ–≥–æ–¥–Ω—è –≤ {club_time} —Å–æ—Å—Ç–æ–∏—Ç—Å—è –≤—Å—Ç—Ä–µ—á–∞ –∫–ª—É–±–∞ '{club_name}'"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
            async with aiohttp.ClientSession() as session:
                await session.post(f'{BACKEND_URL}/notifications/send', json={
                    'user_id': user_id,
                    'notification_type': 'club_reminder',
                    'title': title,
                    'message': message
                })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üë• {title}\n\n{message}"
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–ª—É–±–µ: {e}") 