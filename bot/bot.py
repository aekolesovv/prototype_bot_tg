from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.filters import Command
import asyncio
import os
import aiohttp
import json
from dotenv import load_dotenv
from .notification_service import NotificationService
from db.repositories import UserRepository

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
BACKEND_URL = os.getenv('BACKEND_URL', 'http://localhost:8000/api/v1')

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_states = {}

def get_level_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å')],
            [KeyboardButton(text='–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å')]
        ],
        resize_keyboard=True
    )

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app=WebAppInfo(url='http://localhost:3000'))],
            [KeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º / –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º')],
            [KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö –∏ —à–∫–æ–ª–µ')],
            [KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è')],
            [KeyboardButton(text='üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')]
        ],
        resize_keyboard=True
    )

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {'level': None}
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = UserRepository.get_by_telegram_id(str(user_id))
    if not user:
        user = UserRepository.create_user(
            str(user_id),
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
    
    await message.answer(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∫–æ–ª—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üéì\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è:',
        reply_markup=get_level_keyboard()
    )

@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile ‚Äî –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
/schedule ‚Äî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ú–∏–Ω–∏-—É—Ä–æ–∫–∏ –∏ —Ç–µ—Å—Ç—ã
‚Ä¢ –°–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –∫–ª—É–±–∞—Ö
    """
    await message.answer(help_text)

@dp.message(Command('profile'))
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ backend
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{BACKEND_URL}/profile?user_id={user_id}') as response:
                if response.status == 200:
                    profile = await response.json()
                    profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üìä –£—Ä–æ–≤–µ–Ω—å: {profile.get('level', '–ù–µ –≤—ã–±—Ä–∞–Ω')}
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {profile.get('progress', 0)}%
üìö –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {profile.get('lessons_completed', 0)}
üèÜ –ë–∞–ª–ª—ã: {profile.get('points', 0)}
    """
                else:
                    profile_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
    except:
        profile_text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
    
    await message.answer(profile_text)

@dp.message(Command('schedule'))
async def cmd_schedule(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})
    level = user_state.get('level', 'all')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ backend
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{BACKEND_URL}/schedule?level={level}&user_id={user_id}') as response:
                if response.status == 200:
                    schedule_data = await response.json()
                    schedule = schedule_data.get('schedule', [])
                    
                    if schedule:
                        schedule_text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n\n"
                        for lesson in schedule:
                            schedule_text += f"üïê {lesson.get('time', 'N/A')}\n"
                            schedule_text += f"üìö {lesson.get('title', 'N/A')}\n"
                            schedule_text += f"üë®‚Äçüè´ {lesson.get('teacher', 'N/A')}\n"
                            schedule_text += f"üìç {lesson.get('location', 'N/A')}\n\n"
                    else:
                        schedule_text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ"
                else:
                    schedule_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    except:
        schedule_text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
    
    await message.answer(schedule_text)

@dp.message(Command('notifications'))
async def cmd_notifications(message: types.Message):
    user_id = message.from_user.id
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{BACKEND_URL}/notifications?user_id={user_id}') as response:
                if response.status == 200:
                    data = await response.json()
                    notifications = data.get('notifications', [])
                    unread_count = data.get('unread_count', 0)
                    
                    if not notifications:
                        await message.answer("üîî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                        return
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    recent_notifications = notifications[:5]
                    notification_text = f"üîî –í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({unread_count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö):\n\n"
                    
                    for notification in recent_notifications:
                        status = "üî¥" if not notification["is_read"] else "‚ö™"
                        notification_text += f"{status} {notification['title']}\n"
                        notification_text += f"   {notification['message']}\n\n"
                    
                    if len(notifications) > 5:
                        notification_text += f"... –∏ –µ—â–µ {len(notifications) - 5} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                    
                    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üìã –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="all_notifications")],
                        [types.InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏", callback_data="mark_all_read")],
                        [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")]
                    ])
                    
                    await message.answer(notification_text, reply_markup=keyboard)
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

@dp.message(lambda message: message.text == '–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å')
async def handle_beginner_level(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {'level': 'beginner'}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –ë–î
    user = UserRepository.get_by_telegram_id(str(user_id))
    if user:
        UserRepository.update_user_level(user.id, 'beginner')
    
    await message.answer(
        '‚úÖ –í—ã–±—Ä–∞–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è!\n\n'
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n'
        '‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è\n'
        '‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∏–Ω–∏-—É—Ä–æ–∫–∏\n'
        '‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–ª—É–±–∞—Ö\n'
        '‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å',
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å')
async def handle_advanced_level(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {'level': 'advanced'}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ –ë–î
    user = UserRepository.get_by_telegram_id(str(user_id))
    if user:
        UserRepository.update_user_level(user.id, 'advanced')
    
    await message.answer(
        '‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è!\n\n'
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n'
        '‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è\n'
        '‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∏–Ω–∏-—É—Ä–æ–∫–∏\n'
        '‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–ª—É–±–∞—Ö\n'
        '‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å',
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == '–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
async def handle_open_webapp(message: types.Message):
    await message.answer(
        'üåê –û—Ç–∫—Ä—ã–≤–∞—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...\n\n'
        '–í –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n'
        '‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n'
        '‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫–∏\n'
        '‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã\n'
        '‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–ª—É–±–∞—Ö\n'
        '‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å'
    )

@dp.message(lambda message: message.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º / –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º')
async def handle_contact_teacher(message: types.Message):
    await message.answer(
        'üë®‚Äçüè´ –°–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º:\n\n'
        'üìß Email: teacher@englishschool.com\n'
        'üì± Telegram: @english_teacher\n'
        'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n\n'
        '‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00'
    )

@dp.message(lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö –∏ —à–∫–æ–ª–µ')
async def handle_course_info(message: types.Message):
    info_text = """
üè´ –û –Ω–∞—à–µ–π —à–∫–æ–ª–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:

üìö –ù–∞—à–∏ –∫—É—Ä—Å—ã:
‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (A1-A2)
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å (B1-C1)
‚Ä¢ –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –∫–ª—É–±—ã
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º

üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏
‚Ä¢ –£–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è: –æ—Ç 2000‚ÇΩ/–º–µ—Å
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ: –æ—Ç 1500‚ÇΩ/–∑–∞–Ω—è—Ç–∏–µ
‚Ä¢ –ö–ª—É–±—ã: –æ—Ç 500‚ÇΩ/–º–µ—Å—è—Ü

üìç –ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123
    """
    await message.answer(info_text)

@dp.message(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è')
async def handle_change_level(message: types.Message):
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è:',
        reply_markup=get_level_keyboard()
    )

@dp.message(lambda message: message.text == 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def handle_notifications_button(message: types.Message):
    await cmd_notifications(message)

@dp.callback_query(lambda c: c.data == "all_notifications")
async def show_all_notifications(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{BACKEND_URL}/notifications?user_id={user_id}') as response:
                if response.status == 200:
                    data = await response.json()
                    notifications = data.get('notifications', [])
                    
                    if not notifications:
                        await callback_query.message.edit_text("üîî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                        return
                    
                    notification_text = "üîî –í—Å–µ –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
                    
                    for i, notification in enumerate(notifications, 1):
                        status = "üî¥" if not notification["is_read"] else "‚ö™"
                        date = notification["created_at"][:10] if notification["created_at"] else ""
                        notification_text += f"{i}. {status} {notification['title']}\n"
                        notification_text += f"   {notification['message']}\n"
                        notification_text += f"   üìÖ {date}\n\n"
                    
                    await callback_query.message.edit_text(notification_text)
                else:
                    await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

@dp.callback_query(lambda c: c.data == "mark_all_read")
async def mark_all_notifications_read(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f'{BACKEND_URL}/notifications/read-all?user_id={user_id}') as response:
                if response.status == 200:
                    await callback_query.answer("‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
                    await callback_query.message.edit_text("‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
                else:
                    await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

@dp.callback_query(lambda c: c.data == "notification_settings")
async def show_notification_settings(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{BACKEND_URL}/notifications/settings?user_id={user_id}') as response:
                if response.status == 200:
                    settings = await response.json()
                    
                    settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
                    settings_text += f"üìö –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö: {'‚úÖ' if settings['lesson_reminders'] else '‚ùå'}\n"
                    settings_text += f"üìù –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ—Å—Ç–∞—Ö: {'‚úÖ' if settings['test_notifications'] else '‚ùå'}\n"
                    settings_text += f"üë• –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–ª—É–±–∞—Ö: {'‚úÖ' if settings['club_reminders'] else '‚ùå'}\n"
                    settings_text += f"üí™ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è: {'‚úÖ' if settings['daily_motivation'] else '‚ùå'}\n"
                    settings_text += f"‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {settings['reminder_time']}\n"
                    
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîß –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="edit_notification_settings")]
                    ])
                    
                    await callback_query.message.edit_text(settings_text, reply_markup=keyboard)
                else:
                    await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    except:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

@dp.callback_query(lambda c: c.data == "edit_notification_settings")
async def edit_notification_settings(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìö –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö", callback_data="toggle_lesson_reminders")],
        [types.InlineKeyboardButton(text="üìù –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ—Å—Ç–∞—Ö", callback_data="toggle_test_notifications")],
        [types.InlineKeyboardButton(text="üë• –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–ª—É–±–∞—Ö", callback_data="toggle_club_reminders")],
        [types.InlineKeyboardButton(text="üí™ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="toggle_daily_motivation")],
        [types.InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_reminder_time")]
    ])
    
    await callback_query.message.edit_text(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.message()
async def handle_unknown(message: types.Message):
    await message.answer(
        '‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
    )

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_service = NotificationService(bot)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        notification_task = asyncio.create_task(notification_service.start())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot, skip_updates=True)
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await notification_service.stop()
        if 'notification_task' in locals():
            notification_task.cancel()

if __name__ == '__main__':
    asyncio.run(main())
