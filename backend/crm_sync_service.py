"""
–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å CRM/LMS —Å–∏—Å—Ç–µ–º–∞–º–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∑–∞–Ω—è—Ç–∏–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from .crm_integration import CRMFactory, DEFAULT_CRM_CONFIG

logger = logging.getLogger(__name__)

class CRMSyncService:
    """–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å CRM/LMS"""
    
    def __init__(self, crm_type: str = 'moodle', config: Optional[Dict[str, Any]] = None):
        self.crm_type = crm_type
        self.config = config or DEFAULT_CRM_CONFIG.get(crm_type, {})
        self.sync_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.running = False
        self.last_sync = None
        
    async def start_sync(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.running = True
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å {self.crm_type.upper()}")
        
        while self.running:
            try:
                await self.sync_all_data()
                self.last_sync = datetime.now()
                logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.last_sync}")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                await asyncio.sleep(self.sync_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def stop_sync(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.running = False
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def sync_all_data(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with CRMFactory.create_integration(self.crm_type, self.config) as crm:
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                await self.sync_students(crm)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∏–π
                await self.sync_lessons(crm)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                await self.sync_progress(crm)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
                await self.sync_tests(crm)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def sync_students(self, crm):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        try:
            students = await crm.get_students()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(students)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ {self.crm_type}")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            for student in students:
                logger.debug(f"–°—Ç—É–¥–µ–Ω—Ç: {student.get('firstname')} {student.get('lastname')} - {student.get('level')}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
    
    async def sync_lessons(self, crm):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
            start_date = datetime.now().isoformat()
            end_date = (datetime.now() + timedelta(days=30)).isoformat()
            
            lessons = await crm.get_lessons(start_date, end_date)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(lessons)} –∑–∞–Ω—è—Ç–∏–π –∏–∑ {self.crm_type}")
            
            for lesson in lessons:
                logger.debug(f"–ó–∞–Ω—è—Ç–∏–µ: {lesson.get('title')} - {lesson.get('start_time')}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–Ω—è—Ç–∏–π: {e}")
    
    async def sync_progress(self, crm):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏–∑ –ë–î)
            student_ids = ["123456789", "987654321"]
            
            for student_id in student_ids:
                progress = await crm.get_student_progress(student_id)
                if progress:
                    logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}: {progress.get('completion_percentage')}%")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    async def sync_tests(self, crm):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"""
        try:
            tests = await crm.get_tests()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tests)} —Ç–µ—Å—Ç–æ–≤ –∏–∑ {self.crm_type}")
            
            for test in tests:
                logger.debug(f"–¢–µ—Å—Ç: {test.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
    
    async def manual_sync(self):
        """–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"""
        logger.info("–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        await self.sync_all_data()
        self.last_sync = datetime.now()
        logger.info("–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def get_sync_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return {
            'crm_type': self.crm_type,
            'running': self.running,
            'last_sync': self.last_sync.isoformat() if self.last_sync else None,
            'sync_interval': self.sync_interval
        }

class CRMCache:
    """–ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö CRM/LMS"""
    
    def __init__(self):
        self.students = {}
        self.lessons = {}
        self.progress = {}
        self.tests = {}
        self.cache_timeout = 3600  # 1 —á–∞—Å
    
    def update_students(self, students: List[Dict[str, Any]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        self.students = {
            student['id']: {
                'data': student,
                'timestamp': datetime.now()
            }
            for student in students
        }
    
    def update_lessons(self, lessons: List[Dict[str, Any]]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–Ω—è—Ç–∏–π"""
        self.lessons = {
            lesson['id']: {
                'data': lesson,
                'timestamp': datetime.now()
            }
            for lesson in lessons
        }
    
    def get_student(self, student_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –∫—ç—à–∞"""
        if student_id in self.students:
            cache_entry = self.students[student_id]
            if (datetime.now() - cache_entry['timestamp']).seconds < self.cache_timeout:
                return cache_entry['data']
        return None
    
    def get_lessons(self, level: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∏–∑ –∫—ç—à–∞"""
        lessons = []
        for lesson_id, cache_entry in self.lessons.items():
            if (datetime.now() - cache_entry['timestamp']).seconds < self.cache_timeout:
                lesson = cache_entry['data']
                if level is None or lesson.get('level') == level:
                    lessons.append(lesson)
        return lessons
    
    def clear_expired(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        current_time = datetime.now()
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        expired_students = [
            student_id for student_id, cache_entry in self.students.items()
            if (current_time - cache_entry['timestamp']).seconds >= self.cache_timeout
        ]
        for student_id in expired_students:
            del self.students[student_id]
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–Ω—è—Ç–∏–π
        expired_lessons = [
            lesson_id for lesson_id, cache_entry in self.lessons.items()
            if (current_time - cache_entry['timestamp']).seconds >= self.cache_timeout
        ]
        for lesson_id in expired_lessons:
            del self.lessons[lesson_id]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
crm_cache = CRMCache()

async def start_crm_sync(crm_type: str = 'moodle'):
    """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ CRM/LMS"""
    sync_service = CRMSyncService(crm_type)
    await sync_service.start_sync()

async def test_crm_sync():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ CRM/LMS"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ CRM/LMS...")
    
    sync_service = CRMSyncService('moodle')
    
    try:
        # –¢–µ—Å—Ç —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await sync_service.manual_sync()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status = sync_service.get_sync_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {status}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    asyncio.run(test_crm_sync()) 