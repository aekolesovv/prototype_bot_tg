from sqlalchemy.orm import Session
from .database import engine, SessionLocal
from .models import Base, User, Teacher, Lesson, Club, Test, NotificationSettings
import json

def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    Base.metadata.create_all(bind=engine)

def create_sample_data():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        if db.query(User).first():
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        teachers = [
            Teacher(name="–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", email="anna@englishschool.com", specialization="beginner"),
            Teacher(name="–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤", email="mikhail@englishschool.com", specialization="advanced"),
            Teacher(name="–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", email="elena@englishschool.com", specialization="grammar"),
            Teacher(name="–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤", email="dmitry@englishschool.com", specialization="speaking")
        ]
        
        for teacher in teachers:
            db.add(teacher)
        db.commit()
        
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏
        lessons = [
            Lesson(
                title="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                description="–û—Å–Ω–æ–≤—ã –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∏ –ª–µ–∫—Å–∏–∫–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                level="beginner",
                duration=60,
                max_students=10,
                teacher_id=1,
                day_of_week="Monday",
                start_time="18:00",
                location="–ê—É–¥–∏—Ç–æ—Ä–∏—è 1"
            ),
            Lesson(
                title="–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
                description="–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π —Ä–µ—á–∏",
                level="advanced",
                duration=90,
                max_students=8,
                teacher_id=2,
                day_of_week="Tuesday",
                start_time="19:00",
                location="–ê—É–¥–∏—Ç–æ—Ä–∏—è 2"
            ),
            Lesson(
                title="–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",
                description="–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏",
                level="beginner",
                duration=60,
                max_students=12,
                teacher_id=3,
                day_of_week="Wednesday",
                start_time="17:30",
                location="–ê—É–¥–∏—Ç–æ—Ä–∏—è 1"
            ),
            Lesson(
                title="–ë–∏–∑–Ω–µ—Å-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
                description="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è",
                level="advanced",
                duration=90,
                max_students=6,
                teacher_id=4,
                day_of_week="Thursday",
                start_time="20:00",
                location="–ê—É–¥–∏—Ç–æ—Ä–∏—è 3"
            )
        ]
        
        for lesson in lessons:
            db.add(lesson)
        db.commit()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—É–±—ã
        clubs = [
            Club(
                name="–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–±",
                description="–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ",
                max_participants=10,
                day_of_week="Friday",
                start_time="19:00",
                duration=90
            ),
            Club(
                name="–ö–ª—É–± —á—Ç–µ–Ω–∏—è",
                description="–ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–Ω–∏–≥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
                max_participants=8,
                day_of_week="Saturday",
                start_time="15:00",
                duration=120
            ),
            Club(
                name="–ö–ª—É–± –∫–∏–Ω–æ",
                description="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
                max_participants=12,
                day_of_week="Sunday",
                start_time="16:00",
                duration=150
            ),
            Club(
                name="–ö–ª—É–± –¥–µ–ª–æ–≤–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",
                description="–ë–∏–∑–Ω–µ—Å-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –¥–µ–ª–æ–≤–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞",
                max_participants=6,
                day_of_week="Thursday",
                start_time="20:00",
                duration=90
            )
        ]
        
        for club in clubs:
            db.add(club)
        db.commit()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã
        beginner_test_questions = json.dumps([
            {
                "question": "What is the correct form of the verb 'to be' for 'I'?",
                "options": ["am", "is", "are", "be"],
                "correct_answer": 0
            },
            {
                "question": "Which word is a color?",
                "options": ["run", "blue", "fast", "happy"],
                "correct_answer": 1
            },
            {
                "question": "How do you say 'Hello' in English?",
                "options": ["Goodbye", "Hello", "Thank you", "Please"],
                "correct_answer": 1
            }
        ])
        
        advanced_test_questions = json.dumps([
            {
                "question": "Choose the correct form: 'If I ___ rich, I would travel the world.'",
                "options": ["am", "was", "were", "will be"],
                "correct_answer": 2
            },
            {
                "question": "Which sentence is grammatically correct?",
                "options": [
                    "I have been working here since 2 years",
                    "I have been working here for 2 years",
                    "I am working here since 2 years",
                    "I work here since 2 years"
                ],
                "correct_answer": 1
            },
            {
                "question": "What does 'procrastinate' mean?",
                "options": ["To work hard", "To delay or postpone", "To celebrate", "To study"],
                "correct_answer": 1
            }
        ])
        
        tests = [
            Test(
                title="–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É",
                description="–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
                level="beginner",
                questions=beginner_test_questions,
                time_limit=15
            ),
            Test(
                title="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É",
                description="–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∑–Ω–∞–Ω–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
                level="advanced",
                questions=advanced_test_questions,
                time_limit=20
            )
        ]
        
        for test in tests:
            db.add(test)
        db.commit()
        
        print("‚úÖ –û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

def create_user_if_not_exists(telegram_id: str, username: str = None, first_name: str = None, last_name: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    db = SessionLocal()
    
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        
        if not user:
            user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            notification_settings = NotificationSettings(user_id=user.id)
            db.add(notification_settings)
            db.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
            return user
        else:
            print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {telegram_id}")
            return user
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
        return None
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
    
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    create_sample_data()
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 