import React, { useState, useEffect } from 'react';
import { useTelegramApp } from '../hooks/useTelegramApp';
import apiService from '../services/api';
import './AdminPage.css';

interface CRMStatus {
  status: string;
  message: string;
  crm_type?: string;
  running?: boolean;
  last_sync?: string;
  sync_interval?: number;
}

interface CRMConfig {
  crm_type: string;
  base_url: string;
  api_token: string;
  course_id?: string;
}

const AdminPage: React.FC = () => {
  const { user } = useTelegramApp();
  const [crmStatus, setCrmStatus] = useState<CRMStatus | null>(null);
  const [config, setConfig] = useState<CRMConfig>({
    crm_type: 'moodle',
    base_url: '',
    api_token: '',
    course_id: ''
  });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  useEffect(() => {
    loadCRMStatus();
  }, []);

  const loadCRMStatus = async () => {
    try {
      const response = await apiService.getCRMStatus();
      setCrmStatus(response);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ CRM:', error);
    }
  };

  const handleConfigChange = (field: keyof CRMConfig, value: string) => {
    setConfig(prev => ({ ...prev, [field]: value }));
  };

  const configureCRM = async () => {
    setLoading(true);
    setMessage('');

    try {
      const response = await apiService.configureCRM({
        crm_type: config.crm_type,
        base_url: config.base_url,
        api_token: config.api_token,
        course_id: config.course_id
      });

      if (response.success) {
        setMessage('‚úÖ CRM/LMS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        await loadCRMStatus();
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${response.message}`);
      }
    } catch (error) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CRM/LMS');
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CRM:', error);
    } finally {
      setLoading(false);
    }
  };

  const testConnection = async () => {
    setLoading(true);
    setMessage('');

    try {
      const response = await apiService.testCRMConnection();
      
      if (response.success) {
        setMessage(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –°—Ç—É–¥–µ–Ω—Ç–æ–≤: ${response.data.students_count}, –ó–∞–Ω—è—Ç–∏–π: ${response.data.lessons_count}`);
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${response.message}`);
      }
    } catch (error) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRM:', error);
    } finally {
      setLoading(false);
    }
  };

  const startSync = async () => {
    setLoading(true);
    setMessage('');

    try {
      const response = await apiService.startCRMSync();
      
      if (response.success) {
        setMessage('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
        await loadCRMStatus();
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${response.message}`);
      }
    } catch (error) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const stopSync = async () => {
    setLoading(true);
    setMessage('');

    try {
      const response = await apiService.stopCRMSync();
      
      if (response.success) {
        setMessage('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        await loadCRMStatus();
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${response.message}`);
      }
    } catch (error) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const manualSync = async () => {
    setLoading(true);
    setMessage('');

    try {
      const response = await apiService.manualCRMSync();
      
      if (response.success) {
        setMessage('‚úÖ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        await loadCRMStatus();
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${response.message}`);
      }
    } catch (error) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'running':
        return 'üü¢';
      case 'stopped':
        return 'üî¥';
      case 'not_configured':
        return '‚ö™';
      default:
        return '‚ùì';
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return '–ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å';
    
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU');
  };

  return (
    <div className="admin-page">
      <div className="header">
        <h1>‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ CRM/LMS</h1>
        <p className="subtitle">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏</p>
      </div>

      <div className="admin-content">
        {/* –°—Ç–∞—Ç—É—Å CRM/LMS */}
        <div className="status-section">
          <h2>üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h2>
          {crmStatus ? (
            <div className="status-card">
              <div className="status-header">
                <span className="status-icon">{getStatusIcon(crmStatus.status)}</span>
                <span className="status-text">{crmStatus.message}</span>
              </div>
              
              {crmStatus.crm_type && (
                <div className="status-details">
                  <div className="detail-item">
                    <span className="label">–¢–∏–ø CRM/LMS:</span>
                    <span className="value">{crmStatus.crm_type.toUpperCase()}</span>
                  </div>
                  
                  {crmStatus.running !== undefined && (
                    <div className="detail-item">
                      <span className="label">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</span>
                      <span className="value">{crmStatus.running ? '–ó–∞–ø—É—â–µ–Ω–∞' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}</span>
                    </div>
                  )}
                  
                  {crmStatus.last_sync && (
                    <div className="detail-item">
                      <span className="label">–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</span>
                      <span className="value">{formatDate(crmStatus.last_sync)}</span>
                    </div>
                  )}
                  
                  {crmStatus.sync_interval && (
                    <div className="detail-item">
                      <span className="label">–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</span>
                      <span className="value">{crmStatus.sync_interval} —Å–µ–∫</span>
                    </div>
                  )}
                </div>
              )}
            </div>
          ) : (
            <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...</div>
          )}
        </div>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */}
        <div className="config-section">
          <h2>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h2>
          <div className="config-form">
            <div className="form-group">
              <label>–¢–∏–ø CRM/LMS:</label>
              <select
                value={config.crm_type}
                onChange={(e) => handleConfigChange('crm_type', e.target.value)}
              >
                <option value="moodle">Moodle LMS</option>
                <option value="canvas">Canvas LMS</option>
              </select>
            </div>

            <div className="form-group">
              <label>URL —Å–∏—Å—Ç–µ–º—ã:</label>
              <input
                type="url"
                value={config.base_url}
                onChange={(e) => handleConfigChange('base_url', e.target.value)}
                placeholder="https://your-lms-site.com"
              />
            </div>

            <div className="form-group">
              <label>API —Ç–æ–∫–µ–Ω:</label>
              <input
                type="password"
                value={config.api_token}
                onChange={(e) => handleConfigChange('api_token', e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω"
              />
            </div>

            <div className="form-group">
              <label>ID –∫—É—Ä—Å–∞:</label>
              <input
                type="text"
                value={config.course_id}
                onChange={(e) => handleConfigChange('course_id', e.target.value)}
                placeholder="ID –∫—É—Ä—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
              />
            </div>

            <div className="form-actions">
              <button
                className="action-button primary"
                onClick={configureCRM}
                disabled={loading || !config.base_url || !config.api_token}
              >
                {loading ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∞...' : '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é'}
              </button>
              
              <button
                className="action-button"
                onClick={testConnection}
                disabled={loading || !config.base_url || !config.api_token}
              >
                {loading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'}
              </button>
            </div>
          </div>
        </div>

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π */}
        <div className="sync-section">
          <h2>üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π</h2>
          <div className="sync-actions">
            <button
              className="action-button success"
              onClick={startSync}
              disabled={loading || crmStatus?.status === 'not_configured'}
            >
              ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            </button>
            
            <button
              className="action-button warning"
              onClick={stopSync}
              disabled={loading || crmStatus?.status === 'not_configured'}
            >
              ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            </button>
            
            <button
              className="action-button"
              onClick={manualSync}
              disabled={loading || crmStatus?.status === 'not_configured'}
            >
              üîÑ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            </button>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {message && (
          <div className={`message ${message.includes('‚úÖ') ? 'success' : 'error'}`}>
            {message}
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminPage; 