import React, { useEffect, useState, useCallback } from 'react';
import { useTelegramApp } from '../hooks/useTelegramApp';
import { apiService } from '../services/api';
import { Club } from '../types';
import './ClubsPage.css';

const ClubsPage: React.FC = () => {
  const { user, hapticFeedback, showMainButton, hideMainButton } = useTelegramApp();
  const [clubs, setClubs] = useState<Club[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedClub, setSelectedClub] = useState<Club | null>(null);
  const [joinStatus, setJoinStatus] = useState<{[key: number]: boolean}>({});

  const loadClubs = async () => {
    try {
      const response = await apiService.getClubs();
      setClubs(response.clubs);
    } catch (error) {
      console.error('Error loading clubs:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleJoinClub = useCallback(async () => {
    if (!selectedClub || !user) return;

    try {
      const response = await apiService.joinClub(selectedClub.id, user.id.toString());
      
      if (response.success) {
        hapticFeedback('medium');
        setJoinStatus(prev => ({ ...prev, [selectedClub.id]: true }));
        alert(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–ª—É–±—É "${selectedClub.name}"!`);
        setSelectedClub(null);
      } else {
        hapticFeedback('heavy');
        alert(response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–ª—É–±—É');
      }
    } catch (error) {
      console.error('Join club error:', error);
      hapticFeedback('heavy');
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–ª—É–±—É');
    }
  }, [selectedClub, user, hapticFeedback]);

  useEffect(() => {
    loadClubs();
  }, []);

  useEffect(() => {
    if (selectedClub) {
      showMainButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', handleJoinClub);
    } else {
      hideMainButton();
    }
  }, [selectedClub, showMainButton, hideMainButton, handleJoinClub]);

  const handleClubSelect = (club: Club) => {
    hapticFeedback('light');
    setSelectedClub(selectedClub?.id === club.id ? null : club);
  };

  const getAvailabilityColor = (current: number, max: number) => {
    const percentage = (current / max) * 100;
    if (percentage >= 90) return '#e74c3c'; // –ö—Ä–∞—Å–Ω—ã–π
    if (percentage >= 70) return '#f39c12'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    return '#27ae60'; // –ó–µ–ª–µ–Ω—ã–π
  };

  const getAvailabilityText = (current: number, max: number) => {
    const percentage = (current / max) * 100;
    if (percentage >= 90) return '–ü–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω';
    if (percentage >= 70) return '–ú–∞–ª–æ –º–µ—Å—Ç';
    return '–ï—Å—Ç—å –º–µ—Å—Ç–∞';
  };

  if (isLoading) {
    return (
      <div className="clubs-page">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—É–±–æ–≤...</div>
      </div>
    );
  }

  return (
    <div className="clubs-page">
      <div className="header">
        <h1>üë• –ö–ª—É–±—ã</h1>
        <p className="subtitle">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª—É–±–∞–º –∏ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π</p>
      </div>

      <div className="clubs-list">
        {clubs.length === 0 ? (
          <div className="empty-state">
            <span className="empty-icon">üë•</span>
            <p>–ö–ª—É–±—ã –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã</p>
          </div>
        ) : (
          clubs.map((club) => (
            <div
              key={club.id}
              className={`club-card ${selectedClub?.id === club.id ? 'selected' : ''} ${
                joinStatus[club.id] ? 'joined' : ''
              }`}
              onClick={() => handleClubSelect(club)}
            >
              <div className="club-header">
                <h3 className="club-title">{club.name}</h3>
                <span className={`availability-badge ${joinStatus[club.id] ? 'joined' : ''}`}>
                  {joinStatus[club.id] ? '–í—ã —É—á–∞—Å—Ç–Ω–∏–∫' : getAvailabilityText(club.current_participants, club.max_participants)}
                </span>
              </div>
              
              <p className="club-description">{club.description}</p>
              
              <div className="club-details">
                <div className="detail-item">
                  <span className="detail-icon">üïê</span>
                  <span className="detail-text">{club.schedule}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-icon">üë•</span>
                  <span className="detail-text">
                    {club.current_participants}/{club.max_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                  </span>
                </div>
              </div>

              <div className="progress-container">
                <div className="progress-bar">
                  <div 
                    className="progress-fill"
                    style={{ 
                      width: `${(club.current_participants / club.max_participants) * 100}%`,
                      backgroundColor: getAvailabilityColor(club.current_participants, club.max_participants)
                    }}
                  ></div>
                </div>
                <span className="progress-text">
                  {Math.round((club.current_participants / club.max_participants) * 100)}% –∑–∞–ø–æ–ª–Ω–µ–Ω
                </span>
              </div>

              {selectedClub?.id === club.id && !joinStatus[club.id] && (
                <div className="join-info">
                  <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</p>
                </div>
              )}

              {joinStatus[club.id] && (
                <div className="joined-info">
                  <p>‚úÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –∫–ª—É–±–∞</p>
                </div>
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default ClubsPage; 