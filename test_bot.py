#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""

import asyncio
import aiohttp
import json

BACKEND_URL = "http://localhost:8000/api/v1"

async def test_backend_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend...")
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        try:
            async with session.get(f'{BACKEND_URL}/schedule?level=beginner') as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {len(data['schedule'])} –∑–∞–Ω—è—Ç–∏–π")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        try:
            async with session.get(f'{BACKEND_URL}/profile?user_id=123456789') as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {data['level']}, –ø—Ä–æ–≥—Ä–µ—Å—Å: {data['progress']}%")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—É–±–æ–≤
        try:
            async with session.get(f'{BACKEND_URL}/clubs') as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –ö–ª—É–±—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(data['clubs'])} –∫–ª—É–±–æ–≤")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—É–±–æ–≤: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—É–±–æ–≤: {e}")

def test_bot_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞...")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_states = {}
    
    # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    user_id = 123456789
    user_states[user_id] = {'level': None}
    
    print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–æ: {user_states[user_id]}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    user_states[user_id] = {'level': 'beginner'}
    print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –≤—ã–±—Ä–∞–Ω: {user_states[user_id]['level']}")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile ‚Äî –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
/schedule ‚Äî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ú–∏–Ω–∏-—É—Ä–æ–∫–∏ –∏ —Ç–µ—Å—Ç—ã
‚Ä¢ –°–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –∫–ª—É–±–∞—Ö
    """
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")

async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API endpoints"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    
    endpoints = [
        "/schedule",
        "/profile?user_id=123456789",
        "/clubs",
        "/tests",
        "/lessons"
    ]
    
    async with aiohttp.ClientSession() as session:
        for endpoint in endpoints:
            try:
                async with session.get(f'{BACKEND_URL}{endpoint}') as response:
                    if response.status == 200:
                        print(f"‚úÖ {endpoint} - OK")
                    else:
                        print(f"‚ùå {endpoint} - {response.status}")
            except Exception as e:
                print(f"‚ùå {endpoint} - –û—à–∏–±–∫–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    await test_backend_integration()
    
    # –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
    test_bot_logic()
    
    # –¢–µ—Å—Ç API endpoints
    await test_api_endpoints()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == '__main__':
    asyncio.run(main()) 