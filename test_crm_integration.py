#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRM/LMS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: backend, frontend, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
"""

import asyncio
import aiohttp
import json
import time
import sys
import os
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
from backend.crm_integration import CRMFactory, DEFAULT_CRM_CONFIG
from backend.crm_sync_service import CRMSyncService

class CRMIntegrationTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è CRM/LMS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.backend_url = "http://localhost:8001/api/v1"
        self.webapp_url = "http://localhost:3000"
        self.test_results = []
        
    def log_test(self, test_name: str, success: bool, message: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} {test_name}")
        if message:
            print(f"   {message}")
        
        self.test_results.append({
            "test": test_name,
            "success": success,
            "message": message
        })
        print()
    
    async def test_backend_health(self) -> bool:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è backend API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/health") as response:
                    if response.status == 200:
                        return True
                    else:
                        return False
        except Exception as e:
            return False
    
    async def test_crm_status_endpoint(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ CRM"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/crm/status") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get("status") == "not_configured"
                    else:
                        return False
        except Exception as e:
            return False
    
    async def test_crm_configuration(self) -> bool:
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            config_data = {
                "crm_type": "moodle",
                "base_url": "https://test-moodle.com",
                "api_token": "test_token_123",
                "course_id": "1"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.backend_url}/crm/configure",
                    json=config_data
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get("success") == True
                    else:
                        return False
        except Exception as e:
            return False
    
    async def test_crm_connection_test(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CRM"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.backend_url}/crm/test") as response:
                    if response.status == 200:
                        data = await response.json()
                        # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π CRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                        return data.get("success") == False
                    else:
                        return False
        except Exception as e:
            return False
    
    async def test_manual_sync(self) -> bool:
        """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.backend_url}/crm/sync") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get("success") == True
                    else:
                        return False
        except Exception as e:
            return False
    
    async def test_sync_control(self) -> bool:
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                async with session.get(f"{self.backend_url}/crm/sync/start") as response:
                    if response.status != 200:
                        return False
                
                # –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                async with session.get(f"{self.backend_url}/crm/sync/stop") as response:
                    if response.status != 200:
                        return False
                
                return True
        except Exception as e:
            return False
    
    async def test_crm_data_endpoints(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö CRM"""
        try:
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                async with session.get(f"{self.backend_url}/crm/students") as response:
                    if response.status != 200:
                        return False
                
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π
                async with session.get(f"{self.backend_url}/crm/lessons") as response:
                    if response.status != 200:
                        return False
                
                return True
        except Exception as e:
            return False
    
    def test_crm_integration_module(self) -> bool:
        """–¢–µ—Å—Ç –º–æ–¥—É–ª—è CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            config = DEFAULT_CRM_CONFIG.get('moodle', {})
            integration = CRMFactory.create_integration('moodle', config)
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync_service = CRMSyncService('moodle', config)
            
            return True
        except Exception as e:
            return False
    
    def test_crm_sync_service(self) -> bool:
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            config = DEFAULT_CRM_CONFIG.get('moodle', {})
            sync_service = CRMSyncService('moodle', config)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞
            status = sync_service.get_sync_status()
            
            return isinstance(status, dict) and 'crm_type' in status
        except Exception as e:
            return False
    
    async def test_webapp_api_calls(self) -> bool:
        """–¢–µ—Å—Ç API –≤—ã–∑–æ–≤–æ–≤ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã API, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            async with aiohttp.ClientSession() as session:
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ CRM
                async with session.get(f"{self.backend_url}/crm/status") as response:
                    if response.status != 200:
                        return False
                
                # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CRM
                config_data = {
                    "crm_type": "canvas",
                    "base_url": "https://test-canvas.com",
                    "api_token": "canvas_token_123",
                    "course_id": "course_123"
                }
                
                async with session.post(
                    f"{self.backend_url}/crm/configure",
                    json=config_data
                ) as response:
                    if response.status != 200:
                        return False
                
                return True
        except Exception as e:
            return False
    
    def test_admin_page_structure(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–¥–º–∏–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            admin_files = [
                "webapp/src/pages/AdminPage.tsx",
                "webapp/src/pages/AdminPage.css",
                "webapp/src/services/api.ts"
            ]
            
            for file_path in admin_files:
                if not os.path.exists(file_path):
                    return False
            
            return True
        except Exception as e:
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CRM/LMS –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 50)
        
        # –¢–µ—Å—Ç—ã backend
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend:")
        
        backend_health = await self.test_backend_health()
        self.log_test(
            "–ó–¥–æ—Ä–æ–≤—å–µ Backend API",
            backend_health,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend —Å–µ—Ä–≤–µ—Ä–∞"
        )
        
        crm_status = await self.test_crm_status_endpoint()
        self.log_test(
            "–≠–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ CRM",
            crm_status,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ /crm/status endpoint"
        )
        
        crm_config = await self.test_crm_configuration()
        self.log_test(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            crm_config,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ /crm/configure endpoint"
        )
        
        crm_test = await self.test_crm_connection_test()
        self.log_test(
            "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CRM",
            crm_test,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ /crm/test endpoint"
        )
        
        manual_sync = await self.test_manual_sync()
        self.log_test(
            "–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
            manual_sync,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ /crm/sync endpoint"
        )
        
        sync_control = await self.test_sync_control()
        self.log_test(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π",
            sync_control,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ /crm/sync/start –∏ /crm/sync/stop"
        )
        
        data_endpoints = await self.test_crm_data_endpoints()
        self.log_test(
            "–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–∞–Ω–Ω—ã—Ö CRM",
            data_endpoints,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ /crm/students –∏ /crm/lessons"
        )
        
        # –¢–µ—Å—Ç—ã –º–æ–¥—É–ª–µ–π
        print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π:")
        
        integration_module = self.test_crm_integration_module()
        self.log_test(
            "–ú–æ–¥—É–ª—å CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            integration_module,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ crm_integration.py"
        )
        
        sync_service = self.test_crm_sync_service()
        self.log_test(
            "–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
            sync_service,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ crm_sync_service.py"
        )
        
        # –¢–µ—Å—Ç—ã –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        
        webapp_api = await self.test_webapp_api_calls()
        self.log_test(
            "API –≤—ã–∑–æ–≤—ã –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            webapp_api,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ API –≤—ã–∑–æ–≤–æ–≤ –∏–∑ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        )
        
        admin_structure = self.test_admin_page_structure()
        self.log_test(
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            admin_structure,
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"
        )
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 50)
        
        passed_tests = sum(1 for result in self.test_results if result["success"])
        total_tests = len(self.test_results)
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests / total_tests) * 100:.1f}%")
        
        if passed_tests == total_tests:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            
            print("\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"   ‚Ä¢ {result['test']}: {result['message']}")
        
        return passed_tests == total_tests

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = CRMIntegrationTester()
    
    try:
        success = await tester.run_all_tests()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 